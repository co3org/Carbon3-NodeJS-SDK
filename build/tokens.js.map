{"version":3,"file":"tokens.js","sourceRoot":"","sources":["../src/tokens.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ed25519 from '@transmute/did-key-ed25519';\nimport { JwtCredentialPayload, createVerifiableCredentialJwt, verifyCredential, Issuer } from 'did-jwt-vc';\nimport { EdDSASigner } from 'did-jwt';\nimport { DIDDocument, DIDResolutionResult } from 'did-resolver';\nimport { JWT } from 'did-jwt-vc/lib/types';\nimport { TDIDdoc } from './types';\n\nexport enum CredentialStatus {\n  ACTIVE = 'ACTIVE',\n  REVOKED = 'REVOKED',\n}\n\nexport async function createVC(input: {\n  issuerDID: TDIDdoc;\n  toDID: string;\n  id: string;\n  type: string[];\n  credentialSubject: { [key: string]: any };\n}): Promise<{ vc: JWT; payload: JwtCredentialPayload }> {\n  const { issuerDID, toDID, id, type, credentialSubject } = input;\n  const issuerKey = await ed25519.Ed25519KeyPair.from(issuerDID.keys[0]);\n  if (!issuerKey.privateKey) throw new Error('issuerKey.privateKey missing');\n\n  const signer = EdDSASigner(issuerKey.privateKey);\n  const issuer: Issuer = { did: issuerDID.didDocument.id, signer, alg: 'EdDSA' };\n  const cred: JwtCredentialPayload = {\n    id,\n    iss: issuerKey.controller,\n    sub: toDID,\n    nbf: Math.floor(new Date().getTime() / 1000),\n    vc: {\n      '@context': ['https://www.w3.org/2018/credentials/v1', 'https://w3id.org/security/suites/jws-2020/v1'],\n      type,\n      issuer: {\n        id: issuerKey.controller,\n      },\n      credentialSubject,\n    },\n  };\n\n  const vcJwt = await createVerifiableCredentialJwt(cred, issuer);\n  return { vc: vcJwt, payload: cred };\n}\n\nexport async function createToken(input: {\n  issuerDID: TDIDdoc;\n  toDID: string;\n  internalID: string;\n  amountCO2e: number;\n  reference: string;\n}): Promise<{ vc: JWT; payload: JwtCredentialPayload }> {\n  const { issuerDID, toDID, internalID, amountCO2e, reference } = input;\n\n  return createVC({\n    issuerDID,\n    toDID,\n    id: internalID,\n    type: ['VerifiableCredential', 'Carbon3Token'],\n    credentialSubject: { amountCO2e, reference, status: CredentialStatus.ACTIVE },\n  });\n}\n\nexport async function createRevocationToken(input: {\n  issuerDID: TDIDdoc;\n  toDID: string;\n  internalID: string;\n  activeVCid: string;\n  amountCO2e: number;\n  reference: string;\n}): Promise<{ vc: JWT; payload: JwtCredentialPayload }> {\n  const { issuerDID, toDID, internalID, activeVCid, amountCO2e, reference } = input;\n\n  return createVC({\n    issuerDID,\n    toDID,\n    id: internalID,\n    type: ['VerifiableCredential', 'Carbon3Token'],\n    credentialSubject: {\n      revokedVCid: activeVCid,\n      amountCO2e,\n      reference,\n      status: CredentialStatus.REVOKED,\n    },\n  });\n}\n\nexport async function verifyVC(vc: JWT, issuerDIDdoc: DIDDocument) {\n  function resolver(diddoc: DIDDocument) {\n    return {\n      resolve: async (): Promise<DIDResolutionResult> => {\n        return {\n          didResolutionMetadata: [],\n          didDocumentMetadata: [],\n          didDocument: diddoc,\n        };\n      },\n    };\n  }\n\n  return await verifyCredential(vc, resolver(issuerDIDdoc));\n}\n"]}