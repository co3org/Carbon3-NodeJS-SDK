{"version":3,"file":"dids.js","sourceRoot":"","sources":["../src/dids.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oDAA4B;AAC5B,wEAA0D;AAC1D,+CAAwC;AACxC,wEAA2C;AAG9B,QAAA,WAAW,GAAG,IAAI,uBAAQ,CAAC;IACtC,GAAG,0BAAW,CAAC,WAAW,EAAE;CAC7B,CAAC,CAAC;AAEH,IAAY,aAGX;AAHD,WAAY,aAAa;IACvB,oCAAmB,CAAA;IACnB,4CAA2B,CAAA;AAC7B,CAAC,EAHW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAGxB;AAEM,KAAK,UAAU,SAAS;IAC7B,MAAM,GAAG,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC;QACnC,YAAY,EAAE,GAAG,EAAE;YACjB,OAAO,gBAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QAChC,CAAC;KACF,CAAC,CAAC;IACH,OAAO,GAAG,CAAC;AACb,CAAC;AAPD,8BAOC;AAED,kEAAkE;AAClE,SAAgB,SAAS,CAAC,MAAc,EAAE,GAAY;IACpD,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IAC9B,GAAG,GAAG,GAAG,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,CAAC,WAAW,CAAC,EAAE,EAAE,GAAG,GAAG,MAAM,CAAC,CAAC;IAC7D,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAY,CAAC;AACpC,CAAC;AAJD,8BAIC;AAEM,KAAK,UAAU,gBAAgB;IACpC,OAAO,SAAS,CAAC,gBAAgB,CAAC,QAAQ,CAAC;QACzC,YAAY,EAAE,GAAG,EAAE;YACjB,OAAO,gBAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QAChC,CAAC;KACF,CAAC,CAAC;AACL,CAAC;AAND,4CAMC","sourcesContent":["import crypto from 'crypto';\nimport * as secp256k1 from '@transmute/did-key-secp256k1';\nimport { Resolver } from 'did-resolver';\nimport webResolver from 'web-did-resolver';\nimport { TDIDdoc } from './types';\n\nexport const DIDResolver = new Resolver({\n  ...webResolver.getResolver(),\n});\n\nexport enum SERVICE_TYPES {\n  WMS = 'carbon3 wms',\n  PARTNER = 'carbon3 partner',\n}\n\nexport async function createDID(): Promise<TDIDdoc> {\n  const doc = await secp256k1.generate({\n    secureRandom: () => {\n      return crypto.randomBytes(32);\n    },\n  });\n  return doc;\n}\n\n// helper function to replace all did:key by did:web in the diddoc\nexport function adjustDID(didweb: string, did: TDIDdoc) {\n  let str = JSON.stringify(did);\n  str = str.replaceAll('\"' + did.didDocument.id, '\"' + didweb);\n  return JSON.parse(str) as TDIDdoc;\n}\n\nexport async function createDIDKeypair(): Promise<secp256k1.Secp256k1KeyPair> {\n  return secp256k1.Secp256k1KeyPair.generate({\n    secureRandom: () => {\n      return crypto.randomBytes(32);\n    },\n  });\n}\n"]}